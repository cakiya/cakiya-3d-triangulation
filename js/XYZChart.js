//~~~~~~~~~~~~~~~~~~~~~~//
// generated by chatgpt //
//~~~~~~~~~~~~~~~~~~~~~~//

// chart things
var chartDom = document.getElementById('myChart');
var myChart = echarts.init(chartDom);
var option;

// calculation things
var sensors = [ // the locations of the 3 sensors, used to calculate tag position. 
    // [x,y,z,r] where r is the distance reading.
    [0,0,0, 0],
    [0,0,0, 0],
    [0,0,0, 0]
]

// chart data things
var points = [// sensors without r (distance reading), given to echarts to graph.
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
];
var tag = [0,0,0] // XYZ Location of the tag, given to echarts to graph

function setSensors() { // grabs inputted values and puts it in sensors array.
    // sensor 1's location
    x1 = parseFloat(document.getElementById("x1").value);
    y1 = parseFloat(document.getElementById("y1").value);
    z1 = parseFloat(document.getElementById("z1").value);
    r1 = parseFloat(document.getElementById("r1").value);
    // sensor 2's location
    x2 = parseFloat(document.getElementById("x2").value);
    y2 = parseFloat(document.getElementById("y2").value);
    z2 = parseFloat(document.getElementById("z2").value);
    r2 = parseFloat(document.getElementById("r2").value);
    // sensor 3's location
    x3 = parseFloat(document.getElementById("x3").value);
    y3 = parseFloat(document.getElementById("y3").value);
    z3 = parseFloat(document.getElementById("z3").value);
    r3 = parseFloat(document.getElementById("r3").value);
    // put values into sensors
    sensors = [
        [x1,y1,z1, r1],
        [x2,y2,z2, r2],
        [x3,y3,z3, r3],
    ]
}

function calculateTagPos() { // returns an ARRAY
    // gives you the xyz coordinates of the tag.
    const decimals_of_precision = 10; // how many decimal places of precision you want, 3 would be 3.141, 1 would be 3.1, 5 would be 3.14159
    // sensor 1's location
    x1 = sensors[0][0];
    y1 = sensors[0][1];
    z1 = sensors[0][2];
    r1 = sensors[0][3];
    // sensor 2's location
    x2 = sensors[1][0];
    y2 = sensors[1][1];
    z2 = sensors[1][2];
    r2 = sensors[1][3];
    // sensor 3's location
    x3 = sensors[2][0];
    y3 = sensors[2][1];
    z3 = sensors[2][2];
    r3 = sensors[2][3];

    let x = 0;
    let y = 0;
    let z = 0;

    try {
        const a1 = x1 - x2;
        const b1 = y1 - y2;
        const c1 = z1 - z2;
        const d1 = 0.5 * (Math.pow(r2, 2) - Math.pow(r1, 2) + Math.pow(x1, 2) - Math.pow(x2, 2) + Math.pow(y1, 2) - Math.pow(y2, 2) + Math.pow(z1, 2) - Math.pow(z2, 2));
        const a2 = x1 - x3;
        const b2 = y1 - y3;
        const c2 = z1 - z3;
        const d2 = 0.5 * (Math.pow(r3, 2) - Math.pow(r1, 2) + Math.pow(x1, 2) - Math.pow(x3, 2) + Math.pow(y1, 2) - Math.pow(y3, 2) + Math.pow(z1, 2) - Math.pow(z3, 2));
        // console.log(a1, b1, c1, d1, a2, b2, c2, d2);
  
        const p = b1 * c2 - b2 * c1;
        const q = c1 * a2 - c2 * a1;
        const r = a1 * b2 - a2 * b1;
        // console.log(p, q, r);
  
        const m = (d1 * c2 - d2 * c1) / (b1 * c2 - b2 * c1);
        const n = (b1 * d2 - b2 * d1) / (b1 * c2 - b2 * c1);
        // console.log(m, n, (b1*c2 - b2*c1));
  
        const a = Math.pow(p, 2) + Math.pow(q, 2) + Math.pow(r, 2);
        const b = -2 * p * x1 - 2 * q * y1 - 2 * r * z1 + 2 * m * q + 2 * n * r;
        const c = Math.pow(x1, 2) + Math.pow(y1, 2) + Math.pow(z1, 2) + Math.pow(m, 2) + Math.pow(n, 2) - Math.pow(r1, 2) - 2 * m * y1 - 2 * n * z1;
        // console.log(a, b, c);
  
        // (+4*a*c) or (-4*a*c)
        const discriminant = Math.pow(b, 2) - 4 * a * c;
        if (discriminant < 0) {
            throw 'Location Not Available:';
        }
  
        const t = (-b - Math.sqrt(discriminant)) / (2 * a); // fix: changed it from "-b + math.sqrt(...)" to "-b - math.sqrt(...)"
        x = p * t;
        y = m + q * t;
        z = n + r * t;
    } catch (e) {
        console.error('Location Not Available:');
        document.getElementById("tagsLocationText").textContent="bad calculation (perhaps input values off or wrong)";
        return null;
    }

    document.getElementById("tagsLocationText").textContent="Tags Location (x, y, z)";
    return [
        Number(x.toFixed(decimals_of_precision)),
        Number(y.toFixed(decimals_of_precision)),
        Number(z.toFixed(decimals_of_precision))
    ];
}

function setPoints(tagPos) { // updates points array and tag.
    points = [
        sensors[0].slice(0,3),
        sensors[1].slice(0,3),
        sensors[2].slice(0,3),
    ]
    tag = tagPos;
}

function updateChartSettings() {
    option = { // chart settings
        tooltip: {},
        xAxis3D: {
            type: 'value'
        },
        yAxis3D: {
            type: 'value'
        },
        zAxis3D: {
            type: 'value'
        },
        grid3D: {
            viewControl: {
                // You can rotate the chart by specifying the alpha and beta angles
                alpha: 30,
                beta: 30,
                autoRotate: false
            }
        },
        series: [{
            type: 'scatter3D',
            data: [
                { name: 'Sensor 1', value: points[0] },
                { name: 'Sensor 2', value: points[1] },
                { name: 'Sensor 3', value: points[2] },
                { name: 'Tag', value: tag, itemStyle: { color: '#ff0000' } },  // Green color for this specific point
            ],
            symbolSize: 10,
            itemStyle: {
                color: '#808080' // default grey for other points
            }
        }]
    };
}

// main
function drawChart() {
    setSensors();
    tagPos = calculateTagPos();
    setPoints(tagPos);
    updateChartSettings();
    myChart.setOption(option);
}
